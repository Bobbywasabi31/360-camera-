#include <opencv2/opencv.hpp>
#include <opencv2/stitching.hpp>
#include <iostream>
#include <fstream>
#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QPushButton>
#include <QtWidgets/QLabel>
#include <QtWidgets/QFileDialog>

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    QMainWindow mainWindow;
    mainWindow.setWindowTitle("360° Photo App");

    QPushButton captureButton("Capture Photo", &mainWindow);
    QPushButton saveGPXButton("Save GPX", &mainWindow);
    QLabel imageView(&mainWindow);

    // Create a slot to handle the capture button click
    QObject::connect(&captureButton, &QPushButton::clicked, [&]() {
        cv::VideoCapture cap(0);  // Initialize the camera, 0 for the default camera, or specify the camera index

        // Check if the camera is opened successfully
        if (!cap.isOpened()) {
            std::cerr << "Error: Could not open camera." << std::endl;
            return;
        }

        // Define parameters for photo capture
        int photo_width = 3840;  // Width of the captured photo (4K)
        int photo_height = 1920; // Height of the captured photo (2:1 aspect ratio)

        std::vector<cv::Mat> captured_frames;

        // Capture a series of frames for the photo
        for (int i = 0; i < 5; ++i) {  // Capture 5 frames (you can adjust this number)
            cv::Mat frame;
            cap >> frame;

            // Resize the frame to the desired photo dimensions
            cv::resize(frame, frame, cv::Size(photo_width, photo_height));

            // Append the frame to the vector
            captured_frames.push_back(frame);
        }

        // Release the camera
        cap.release();

        // Stitch the captured frames into a panorama
        cv::Stitcher stitcher = cv::Stitcher::create();
        cv::Mat panorama;
        cv::Stitcher::Status status = stitcher.stitch(captured_frames, panorama);

        if (status == cv::Stitcher::OK) {
            // Display the 360° photo
            imageView.setPixmap(QPixmap::fromImage(
                QImage(panorama.data, panorama.cols, panorama.rows, panorama.step, QImage::Format_RGB888)
            ));
        } else {
            std::cerr << "Error during stitching" << std::endl;
        }
    });

    // Create a slot to handle the save GPX button click
    QObject::connect(&saveGPXButton, &QPushButton::clicked, [&]() {
        // Write the GPX file (replace this with actual GPS data)
        double latitude = 0.0;
        double longitude = 0.0;

        std::ofstream gpxFile("location_data.gpx");

        gpxFile << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << std::endl;
        gpxFile << "<gpx version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\">" << std::endl;
        gpxFile << "  <wpt lat=\"" << latitude << "\" lon=\"" << longitude << "\">" << std::endl;
        gpxFile << "    <name>Location Name</name>" << std::endl;
        gpxFile << "  </wpt>" << std::endl;
        gpxFile << "</gpx>" << std::endl;
        gpxFile.close();
    });

    mainWindow.setCentralWidget(&imageView);
    mainWindow.setMenuBar(&app);

    captureButton.setGeometry(10, 10, 150, 40);
    saveGPXButton.setGeometry(170, 10, 100, 40);
    imageView.setGeometry(10, 60, 640, 480);

    mainWindow.show();
    return app.exec();
}
